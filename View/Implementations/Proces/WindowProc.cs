using System; using System.Windows;  using View.Implementations.ResourceService;  using ViewModel.Interfaces;  namespace View.Implementations.Proces {     public abstract class WindowProc : IProc     {         private Window? _window = null;          private IDbContextBuilder _dbContextCreator;          private IWindowResourceService _windowResourceService;          private IMessageService _messageService;          private Window Window         {             get => _window ??= CreateConfiguredWindow();         }          protected WindowProc(IDbContextBuilder dbContextCreator,             IWindowResourceService windowResourceService, IMessageService messageService)         {             _dbContextCreator = dbContextCreator;             _windowResourceService = windowResourceService;             _messageService = messageService;         }           private Window CreateConfiguredWindow()         {             var window = CreateWindow(_dbContextCreator, _windowResourceService, _messageService);             window.Closed += Window_Closed;             return window;         }          protected abstract Window CreateWindow(IDbContextBuilder dbContextCreator,             IWindowResourceService windowResourceService, IMessageService messageService);          public void Invoke()         {             var window = Window;             if (window.IsVisible)             {                 window.Activate();             }             else             {                 window.Show();             }         }          private void Window_Closed(object? sender, EventArgs e) => _window = null;     } }